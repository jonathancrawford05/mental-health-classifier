#!/usr/bin/env python3
\"\"\"\nModel Inference Script\n\nThis script shows how to load and use the trained mental health classifier\nfor making predictions on new text inputs.\n\"\"\"\n\nimport sys\nimport json\nimport pickle\nfrom pathlib import Path\nimport torch\n\n# Add src to path\nproject_root = Path(__file__).parent\nsrc_path = project_root / \"src\"\nsys.path.insert(0, str(src_path))\n\nfrom models import MentalHealthClassifier\nfrom data import ClinicalTextPreprocessor\nfrom torchtext.data.utils import get_tokenizer\nimport torch.nn.functional as F\n\n\nclass MentalHealthPredictor:\n    \"\"\"Class for loading and using trained mental health classifier.\"\"\"\n    \n    def __init__(self, model_dir: str = \"models/\"):\n        self.model_dir = Path(model_dir)\n        self.model = None\n        self.vocab = None\n        self.config = None\n        self.preprocessor = None\n        self.tokenizer = None\n        self.device = torch.device('cpu')  # Use CPU for inference\n        \n        self.label_names = ['Depression', 'Anxiety', 'Suicide']\n        \n    def load_model(self):\n        \"\"\"Load the trained model and all required components.\"\"\"\n        print(\"Loading trained mental health classifier...\")\n        \n        # Load model info and config\n        model_info_path = self.model_dir / \"model_info.json\"\n        with open(model_info_path, 'r') as f:\n            model_info = json.load(f)\n            self.config = model_info['config']\n        \n        print(f\"Model has {model_info['total_parameters']:,} parameters\")\n        \n        # Load vocabulary\n        vocab_path = self.model_dir / \"vocab.pkl\"\n        with open(vocab_path, 'rb') as f:\n            self.vocab = pickle.load(f)\n        \n        print(f\"Vocabulary size: {len(self.vocab)}\")\n        \n        # Create model with same config as training\n        model_config = self.config['model']\n        self.model = MentalHealthClassifier(\n            vocab_size=model_config['vocab_size'],\n            n_embd=model_config['n_embd'],\n            num_heads=model_config['num_heads'],\n            n_layer=model_config['n_layer'],\n            num_classes=model_config['num_classes'],\n            max_seq_length=model_config['max_seq_length'],\n            dropout=model_config['dropout']\n        )\n        \n        # Load trained weights\n        checkpoint_path = self.model_dir / \"best_model.pt\"\n        checkpoint = torch.load(checkpoint_path, map_location=self.device)\n        self.model.load_state_dict(checkpoint['model_state_dict'])\n        \n        print(f\"Loaded model with validation F1: {checkpoint.get('best_val_f1', 'unknown')}\")\n        \n        # Set model to evaluation mode\n        self.model.eval()\n        \n        # Initialize preprocessor and tokenizer\n        self.preprocessor = ClinicalTextPreprocessor()\n        self.tokenizer = get_tokenizer('basic_english')\n        \n        print(\"âœ… Model loaded successfully!\\n\")\n    \n    def predict(self, text: str, return_probabilities: bool = True):\n        \"\"\"Make prediction on input text.\"\"\"\n        if self.model is None:\n            raise ValueError(\"Model not loaded. Call load_model() first.\")\n        \n        # Preprocess text\n        preprocessed_text = self.preprocessor.preprocess(text)\n        tokens = self.tokenizer(preprocessed_text)\n        token_ids = [self.vocab[token] for token in tokens]\n        \n        # Use max_length from training config\n        max_length = self.config['data']['max_length']\n        if len(token_ids) > max_length:\n            token_ids = token_ids[:max_length]\n        \n        # Create attention mask\n        attention_mask = [1] * len(token_ids)\n        \n        # Pad to max_length\n        pad_token_id = self.vocab['<pad>']\n        padding_length = max_length - len(token_ids)\n        token_ids.extend([pad_token_id] * padding_length)\n        attention_mask.extend([0] * padding_length)\n        \n        # Convert to tensors\n        input_ids = torch.tensor([token_ids], dtype=torch.long)\n        attention_mask = torch.tensor([attention_mask], dtype=torch.long)\n        \n        # Make prediction\n        with torch.no_grad():\n            outputs = self.model(input_ids, attention_mask)\n            probabilities = F.softmax(outputs['logits'], dim=-1)\n            prediction = torch.argmax(outputs['logits'], dim=-1)\n        \n        predicted_class = self.label_names[prediction.item()]\n        \n        if return_probabilities:\n            probs = probabilities[0].cpu().numpy()\n            prob_dict = {}\n            for i, label in enumerate(self.label_names):\n                prob_dict[label] = float(probs[i])\n            return predicted_class, prob_dict\n        \n        return predicted_class\n    \n    def predict_batch(self, texts: list):\n        \"\"\"Make predictions on multiple texts.\"\"\"\n        results = []\n        for text in texts:\n            prediction, probabilities = self.predict(text, return_probabilities=True) \n            results.append({\n                'text': text,\n                'prediction': prediction,\n                'probabilities': probabilities\n            })\n        return results\n\n\ndef demo_predictions():\n    \"\"\"Demonstrate how to use the trained model.\"\"\"\n    print(\"=\" * 80)\n    print(\"MENTAL HEALTH CLASSIFIER - INFERENCE DEMO\")\n    print(\"=\" * 80)\n    \n    # Initialize predictor\n    predictor = MentalHealthPredictor()\n    \n    # Load the trained model\n    predictor.load_model()\n    \n    # Test examples\n    test_examples = [\n        \"I feel hopeless and can't see any way out of this situation\",\n        \"I'm constantly worried about everything that could go wrong\", \n        \"I've been having thoughts about ending my life\",\n        \"Patient reports feeling great and enjoying daily activities\",\n        \"Pt c/o severe depression w/ SI and h/o anxiety\",  # Clinical text\n        \"Unable to sleep, no appetite, feeling worthless every day\"\n    ]\n    \n    print(\"Making predictions on sample texts:\\n\")\n    \n    for i, text in enumerate(test_examples, 1):\n        print(f\"Example {i}:\")\n        print(f\"Text: {text}\")\n        \n        # Get prediction\n        prediction, probabilities = predictor.predict(text)\n        \n        print(f\"Predicted: {prediction}\")\n        print(\"Probabilities:\")\n        for label, prob in probabilities.items():\n            print(f\"  {label}: {prob:.3f}\")\n        print(\"-\" * 60)\n    \n    print(\"\\nðŸ”¬ Clinical Text Processing Demo:\")\n    clinical_text = \"Pt c/o depression w/ SI and h/o MDD\"\n    preprocessed = predictor.preprocessor.preprocess(clinical_text)\n    print(f\"Original: {clinical_text}\")\n    print(f\"Processed: {preprocessed}\")\n    \n    prediction, probs = predictor.predict(clinical_text)\n    print(f\"Prediction: {prediction}\")\n    print(f\"Confidence: {max(probs.values()):.3f}\")\n\n\ndef interactive_mode():\n    \"\"\"Interactive mode for testing custom text.\"\"\"\n    print(\"\\n\" + \"=\" * 80)\n    print(\"INTERACTIVE MODE\")\n    print(\"=\" * 80)\n    print(\"Enter text to classify (or 'quit' to exit):\\n\")\n    \n    predictor = MentalHealthPredictor()\n    predictor.load_model()\n    \n    while True:\n        try:\n            user_input = input(\"Enter text: \").strip()\n            \n            if user_input.lower() in ['quit', 'exit', 'q']:\n                print(\"Goodbye!\")\n                break\n            \n            if not user_input:\n                continue\n                \n            prediction, probabilities = predictor.predict(user_input)\n            \n            print(f\"\\nPrediction: {prediction}\")\n            print(\"Confidence scores:\")\n            for label, prob in sorted(probabilities.items(), key=lambda x: x[1], reverse=True):\n                print(f\"  {label}: {prob:.3f}\")\n            print()\n            \n        except KeyboardInterrupt:\n            print(\"\\nGoodbye!\")\n            break\n        except Exception as e:\n            print(f\"Error: {e}\")\n\n\nif __name__ == \"__main__\":\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Mental Health Classifier Inference\")\n    parser.add_argument(\"--interactive\", \"-i\", action=\"store_true\", \n                       help=\"Run in interactive mode\")\n    parser.add_argument(\"--text\", \"-t\", type=str,\n                       help=\"Classify a single text\")\n    \n    args = parser.parse_args()\n    \n    if args.text:\n        # Single prediction mode\n        predictor = MentalHealthPredictor()\n        predictor.load_model()\n        prediction, probs = predictor.predict(args.text)\n        print(f\"Text: {args.text}\")\n        print(f\"Prediction: {prediction}\")\n        for label, prob in probs.items():\n            print(f\"  {label}: {prob:.3f}\")\n    elif args.interactive:\n        # Interactive mode\n        interactive_mode()\n    else:\n        # Demo mode\n        demo_predictions()\n